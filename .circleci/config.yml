version: 2.1
orbs:
  # node: circleci/node@5.0.1
  docker: circleci/docker@2.1.4
  heroku: circleci/heroku@2.0.0
  snyk: snyk/snyk@1.5.0
jobs:
  # build:
  #   docker:
  #     - image: cimg/node:16.10

  #   steps:
  #     - checkout
  #     - node/install-packages:
  #         pkg-manager: npm

  # if got orb dont need to run anymore
  # - run: |
  #     echo "Installing dependencies..."
  #     npm install
  # test:
  #   docker:
  #     - image: cimg/node:16.10
  #   steps:
  #     - checkout
  #     - node/install-packages:
  #         pkg-manager: npm
  #     - run: |
  #         echo "Running tests..."
  #         npm run test

  # publish:
  #   executor: docker/docker
  #   steps:
  #     - setup_remote_docker
  #     - checkout
  #     - docker/check
  #     #         docker-username: DOCKERHUB_LOGIN  # DOCKER_LOGIN is the default value, if it exists, it automatically would be used.
  #     #         docker-password: DOCKERHUB_PASSWORD  # DOCKER_PASSWORD is the default value
  #     - docker/build:
  #         image: mrcicil/test-repo
  #     - docker/push:
  #         image: mrcicil/test-repo
  scan:
    docker:
      - image: cimg/node:16.10
    environment:
      IMAGE_NAME: mrcicil/test_repository
    steps:
      - checkout
      - setup_remote_docker      
      - docker/check:
          docker-username: DOCKERHUB_LOGIN
          docker-password: DOCKERHUB_PASSWORD
      - run: docker build -t $IMAGE_NAME .
      - snyk/scan: 
          docker-image-name: $IMAGE_NAME
          # The "fail-on-issues: false" option makes the scan report issues but always exit with code 0
          # This allows the pipeline to continue even if vulnerabilities are found
          fail-on-issues: false
          severity-threshold: medium
  
  deploy:
    docker:
      - image: cimg/node:16.10
    steps:
      - setup_remote_docker
      - heroku/install
      - checkout
      - run:
          name: Heroku Container Push
          command: |
            heroku container:login
            heroku stack:set container -a k8test
            heroku container:push web -a k8test
            heroku container:release web -a k8test

workflows:
  simple_workflow:
    jobs:
      # - build
      # - test:
      #     requires:
      #       - build
      # - publish:
      #     requires:
      #       - build
      - scan
      - deploy:
          requires:
            - scan


#         version: 2.1

# orbs:
#   # Node.js orb provides functionality for working with Node.js applications
#   node: circleci/node@5.0.1
#   # Docker orb provides commands for building and publishing Docker images
#   docker: circleci/docker@2.1.4
#   # Heroku orb provides integration with Heroku deployment platform
#   heroku: circleci/heroku@2.0.0
#   # Snyk orb provides security scanning features
#   snyk: snyk/snyk@1.5.0

# jobs:
#   # The 'build' job installs dependencies for the application
#   build:
#     docker:
#       - image: cimg/node:16.10
#     steps:
#       - checkout
#       - node/install-packages:
#           pkg-manager: npm
#       - run: |
#           echo "Installing dependencies..."
#           npm install

#   # The 'test' job runs your application tests
#   test:
#     docker:
#       - image: cimg/node:16.10
#     steps:
#       - checkout
#       - node/install-packages:
#           pkg-manager: npm
#       - run: |
#           echo "Running tests..."
#           npm run test
  
#   # The 'scan' job performs container security scanning
#   scan:
#     docker:
#       - image: cimg/node:16.10
#     environment:
#       IMAGE_NAME: wongshennan/test_repository
#     steps:
#       - checkout
#       - setup_remote_docker      
#       - docker/check:
#           docker-username: DOCKERHUB_LOGIN
#           docker-password: DOCKERHUB_PASSWORD
#       - run: docker build -t $IMAGE_NAME .
#       - snyk/scan: 
#           docker-image-name: $IMAGE_NAME
#           # The "fail-on-issues: false" option makes the scan report issues but always exit with code 0
#           # This allows the pipeline to continue even if vulnerabilities are found
#           fail-on-issues: false
#           severity-threshold: medium

#   # The 'codescan' job performs static code analysis on your source code
#   codescan:
#     docker:
#       - image: cimg/node:16.10
#     steps:
#       - checkout
#       - node/install-packages:
#           pkg-manager: npm
#       - snyk/install
#       - run: |
#           snyk code test
  
#   # The 'publish' job builds and pushes your Docker image to a registry
#   publish:
#     executor: docker/docker
#     steps:
#       - setup_remote_docker
#       - checkout
#       - docker/check:
#           docker-username: DOCKERHUB_LOGIN
#           docker-password: DOCKERHUB_PASSWORD
#       - docker/build:
#           image: wongshennan/test_repository
#       - docker/push:
#           image: wongshennan/test_repository

#   # The 'deploy' job deploys your application to Heroku
#   deploy:
#     docker:
#       - image: cimg/node:16.10
#     steps:
#       - setup_remote_docker      
#       - heroku/install
#       - checkout
#       - run:
#           name: Heroku Container Push
#           command: | 
#               heroku container:login
#               heroku stack:set container -a shennan-su-devops
#               heroku container:push web -a shennan-su-devops
#               heroku container:release web -a shennan-su-devops

# # Workflows define the order of jobs and their dependencies
# workflows:
#   simple_workflow:
#     jobs:
#       - build
#       - test:
#           requires:
#             - build
#       - scan:
#                 requires:
#                             - build
#       # - codescan:
#       #     requires:
#       #       - build
#       # - publish:
#       #     requires:
#       #       - test
#       #       - scan
#       #       - codescan
#       - deploy:
#           requires:
#             - publish

